#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    // 追加：マウスクリックンを入力し、一定時間マウスレイヤーを保持するが、その後、デフォルトレイヤーに自動的に切り替える

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        to_layer_5: to_layer_5 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 5 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_5";
        };

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl 4>;

            label = "MKP_EXIT_AML";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E             &kp R                       &kp T                                                       &kp Y        &kp U    &kp I      &kp O    &kp P
&kp A             &kp S         &kp D             &kp F                       &kp G        &kp ESC                         &kp MINUS      &kp H        &lt 5 J  &kp K      &kp L    &kp SEMICOLON
&mt LEFT_SHIFT Z  &kp X         &kp C             &kp V                       &kp B        &kp TAB                         &kp EQUAL      &kp N        &kp M    &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_ALT  &kp LEFT_COMMAND  &lt_to_layer_0 6 LA(SPACE)  &lt 2 SPACE  &lt_to_layer_0 3 LG(SPACE)      &kp BACKSPACE  &lt 1 ENTER                               &lt 5 LG(SPACE)
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SYMBPLS {
            bindings = <
&trans     &kp AMPERSAND    &kp ASTRK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS                                &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON  &kp F4            &kp BACKSLASH
&kp TILDE  &kp DOLLAR       &kp PERCENT  &kp LCTRL             &trans                 &kp LS(ESC)      &kp UNDER    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp COLON      &kp F9            &kp COLON
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN  &kp POUND             &trans                 &kp LS(TAB)      &kp KP_PLUS  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LESS_THAN  &kp GREATER_THAN  &kp QUESTION
&trans     &trans           &trans       &trans                &trans                 &trans           &trans       &trans                                                                        &trans
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp N7        &kp N8        &kp N9        &kp PLUS                                         &trans               &kp F7  &kp F8  &kp F9  &kp F10
&kp SLASH                   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &kp N0         &trans              &trans               &kp F4  &kp F5  &kp F6  &kp F11
&mt LEFT_SHIFT KP_NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD    &kp EQUAL      &trans              &kp ESC              &kp F1  &kp F2  &kp F3  &kp F12
&trans                      &kp LEFT_ALT  &kp N0        &trans        &trans        &trans         &kp LC(LEFT_ARROW)  &kt LC(RIGHT_ARROW)                          &kp F13
            >;
        };

        ARROW {
            bindings = <
&kp LA(LC(LG(LEFT_ARROW)))  &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &kp LA(LC(LG(RIGHT_ARROW)))                      &kp LC(LA(LG(LEFT_ARROW)))  &kp LS(TAB)             &kp UP_ARROW  &kp TAB                  &kp LC(LA(LG(RIGHT_ARROW)))
&kp HOME                    &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END                      &trans      &trans  &kp HOME                    &kp LEFT_ARROW          &kp DOWN      &kp RIGHT_ARROW          &kp END
&kp LEFT_SHIFT              &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans                       &trans      &trans  &trans                      &kp LG(LS(LEFT_ARROW))  &trans        &kp LG(LS(RIGHT_ARROW))  &trans
&trans                      &trans                  &trans          &trans                   &trans                       &trans      &trans  &trans                                                                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&to_layer_0 Q             &to_layer_0 W         &to_layer_0 E             &to_layer_0 R          &to_layer_0 T                                                        &to_layer_0 Y      &to_layer_0 U      &kp LC(UP_ARROW)   &to_layer_0 O      &to_layer_0 P
&to_layer_0 A             &to_layer_0 S         &to_layer_0 D             &to_layer_0 F          &to_layer_0 G      &to_layer_0 ESC            &kp LG(V)              &kp LC(LS(TAB))    &mkp_exit_AML MB1  &mkp_exit_AML MB3  &mkp_exit_AML MB2  &kp LC(TAB)
&mt LEFT_SHIFT Z          &to_layer_0 X         &to_layer_0 C             &to_layer_0 V          &to_layer_0 B      &to_layer_0 TAB            &kp LG(C)              &to_layer_0 N      &mkp MB4           &kp LG(W)          &mkp MB5           &to_layer_0 SLASH
&to_layer_0 LEFT_CONTROL  &to_layer_0 LEFT_ALT  &to_layer_0 LEFT_COMMAND  &to_layer_0 LA(SPACE)  &to_layer_0 SPACE  &to_layer_0 LG(SPACE)      &to_layer_0 BACKSPACE  &to_layer_0 ENTER                                                           &to_layer_0 DELETE
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
